-- Fisch Script by Omega V13.5.8
-- Compatible with Delta, Fluxus, Cryptic, Arceus X, Codex
-- Improved with enhanced security and optimization

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local GuiService = game:GetService("GuiService")
local TweenService = game:GetService("TweenService")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")
local Character = Player.Character or Player.CharacterAdded:Wait()

-- [ üõ°Ô∏è SECURITY & DEBUG üõ°Ô∏è ]
local security = {
    VerifiedEvents = {},
    FailedEvents = {},
    LastEventCheck = 0,
    EventCheckCooldown = 60, -- Seconds between re-checking failed events
    RunningTasks = {},
    MaxConsecutiveFailures = 3,
    DebugMode = false
}

-- [ üöú FARMS üöú ]
local farm = {
    LiveFarmStatus = false,
    EnableFarming = false,
    AutoCast = false,
    AutoShake = false,
    LockShakeMiddle = false,
    DisableRodReset = false,
    AutoReel = false,
    AutoSell = false,
    FreezeYourself = false,
    CompleteReelMinigame = false,
    LegitCastMode = false,
    CastDelay = 1,
    ShakeDelay = 1,
    ReelDelay = 1,
    PreserveCatch = false,
    AutoEquipRod = false,
    AutoAppraise = false,
    AutoAppraiseWeight = 0,
    AutoMutations = false,
    -- Random delays to prevent pattern detection
    MinRandomDelay = 0.2,
    MaxRandomDelay = 0.5
}

-- [ ü¶Ä CRAB FEATURES ü¶Ä ]
local crab = {
    AutoBuyCrabCages = false,
    SpamCrabCages = false,
    CollectAllCrabCages = false,
    AutoCollectCages = false,
    AutoUseBait = false,
    AutoUseCustomBait = false,
    AutoUseAllBait = false,
    BaitChangeInterval = 5,
    SafeModeCollect = false
}

-- [ üîÆ TELEPORTS üîÆ ]
local teleports = {
    DiscoverAllPlaces = false,
    TeleportCooldown = 5,
    LastTeleportTime = 0
}

-- [ üì£ WEBHOOK ALERTS üì£ ]
local webhook = {
    UseWebhooking = false,
    WebhookURL = "",
    UserIDPing = "",
    WebhookInterval = 600,
    MythicalTracking = false,
    MythicalAlerts = false,
    FishCaughtTracking = false,
    LevelsTracking = false,
    LastWebhookSent = 0
}

-- [ ‚öô SETTINGS ‚öô ]
local settings = {
    Theme = "Dark",
    UITransparency = 0.5,
    UIKeybind = Enum.KeyCode.LeftControl,
    AutoLoadConfig = false,
    SafeMode = true, -- Enable more conservative delays to avoid detection
}

-- [ üïπ UI NAVIGATION üïπ ]
local ui = {
    NavigationEnabled = false,
    FocusedElement = nil,
    Elements = {},
    FeedbackDuration = 0.3,
    Colors = {
        Normal = Color3.fromRGB(255, 255, 255),
        Focused = Color3.fromRGB(0, 170, 255),
        Active = Color3.fromRGB(85, 255, 127),
        Error = Color3.fromRGB(255, 85, 85)
    },
    Sounds = {
        Click = {ID = "rbxassetid://6895079853", Volume = 0.5},
        Hover = {ID = "rbxassetid://6895079733", Volume = 0.2},
        Success = {ID = "rbxassetid://6895079773", Volume = 0.5},
        Error = {ID = "rbxassetid://6895079812", Volume = 0.5}
    }
}

-- [ üõ†Ô∏è HELPER FUNCTIONS üõ†Ô∏è ]
local function debugLog(message, ...)
    if security.DebugMode then
        print("[Fisch Debug] " .. string.format(message, ...))
    end
end

local function getRandomDelay(min, max)
    return min + (max - min) * math.random()
end

local function safeWait(duration)
    local adjustedDuration = duration
    if settings.SafeMode then
        -- Add a small random factor to avoid predictable patterns
        adjustedDuration = duration + getRandomDelay(farm.MinRandomDelay, farm.MaxRandomDelay)
    end
    task.wait(adjustedDuration)
    return adjustedDuration
end

local function playSound(soundType)
    local sound = Instance.new("Sound")
    sound.SoundId = ui.Sounds[soundType].ID
    sound.Volume = ui.Sounds[soundType].Volume
    sound.Parent = PlayerGui
    sound:Play()
    game:GetService("Debris"):AddItem(sound, 2)
    return sound
end

local function showFeedback(element, status)
    if not element then return end
    
    local originalColor = element.BackgroundColor3
    local originalTransparency = element.BackgroundTransparency
    local targetColor = status == "success" and ui.Colors.Active or ui.Colors.Error
    
    local tweenInfo = TweenInfo.new(ui.FeedbackDuration, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
    local tween = TweenService:Create(element, tweenInfo, {
        BackgroundColor3 = targetColor,
        BackgroundTransparency = originalTransparency * 0.5 -- Reduce transparency for better visibility
    })
    
    tween:Play()
    
    playSound(status == "success" and "Success" or "Error")
    
    task.delay(ui.FeedbackDuration * 2, function()
        local revertTween = TweenService:Create(element, tweenInfo, {
            BackgroundColor3 = originalColor,
            BackgroundTransparency = originalTransparency
        })
        revertTween:Play()
    end)
end

-- [ üîç EVENT VERIFICATION üîç ]
local function checkEvent(eventName)
    -- Check if the event was already verified
    if security.VerifiedEvents[eventName] then
        return true
    end
    
    -- Check if the event failed recently and is on cooldown
    if security.FailedEvents[eventName] then
        local timeSinceLastCheck = tick() - security.LastEventCheck
        if timeSinceLastCheck < security.EventCheckCooldown then
            return false
        end
    end
    
    -- Try to find the event
    local event = ReplicatedStorage:FindFirstChild(eventName)
    security.LastEventCheck = tick()
    
    if event then
        security.VerifiedEvents[eventName] = true
        security.FailedEvents[eventName] = nil
        debugLog("Event %s verified successfully", eventName)
        return true
    else
        -- Store failed event and increment failure counter
        security.FailedEvents[eventName] = (security.FailedEvents[eventName] or 0) + 1
        debugLog("Event %s not found (Failure count: %d)", eventName, security.FailedEvents[eventName])
        return false
    end
end

local function safeFireServer(eventName, ...)
    if not checkEvent(eventName) then
        debugLog("Skipping fire server for non-existent event: %s", eventName)
        return false
    end
    
    local event = ReplicatedStorage:FindFirstChild(eventName)
    local args = {...}
    
    -- Use pcall to safely execute FireServer
    local success, errorMsg = pcall(function()
        event:FireServer(unpack(args))
    end)
    
    if not success then
        debugLog("FireServer failed for %s: %s", eventName, errorMsg)
        return false
    end
    
    return true
end

-- [ üéÆ GAME FUNCTIONS üéÆ ]
function CastRod(power)
    return safeFireServer("CastRodEvent", power)
end

function ShakeRod()
    return safeFireServer("ShakeRodEvent")
end

function ReelFish()
    return safeFireServer("ReelFishEvent")
end

function BuyCrabCage()
    return safeFireServer("BuyCrabCageEvent")
end

function TeleportToPlace(placeName)
    local currentTime = tick()
    if currentTime - teleports.LastTeleportTime < teleports.TeleportCooldown then
        debugLog("Teleport on cooldown, waiting...")
        return false
    end
    
    local success = safeFireServer("TeleportToPlaceEvent", placeName)
    if success then
        teleports.LastTeleportTime = currentTime
    end
    return success
end

function CollectCrabCage(cageId)
    return safeFireServer("CollectCrabCageEvent", cageId)
end

function SellFish()
    return safeFireServer("SellFishEvent")
end

function AppraiseFish(fishId)
    return safeFireServer("AppraiseFishEvent", fishId)
end

function EquipRod()
    return safeFireServer("EquipRodEvent")
end

local function findCageIds()
    local cages = {}
    -- Implementation would depend on how crab cages are stored in the game
    -- This is a placeholder
    for _, obj in pairs(Workspace:GetChildren()) do
        if obj:IsA("Model") and obj.Name:find("CrabCage") then
            table.insert(cages, obj:GetAttribute("ID") or obj.Name)
        end
    end
    return cages
end

-- [ üßµ TASK HANDLING üßµ ]
local function startTask(taskName, func, interval)
    -- Stop existing task if running
    if security.RunningTasks[taskName] then
        security.RunningTasks[taskName] = false
    end
    
    -- Mark this task as running
    security.RunningTasks[taskName] = true
    
    -- Start task loop
    task.spawn(function()
        debugLog("Starting task: %s", taskName)
        while security.RunningTasks[taskName] do
            local success, errorMsg = pcall(func)
            if not success then
                debugLog("Error in task %s: %s", taskName, errorMsg)
                showFeedback(PlayerGui:FindFirstChild(taskName.."Button"), "error")
            end
            safeWait(interval or 0.1)
        end
        debugLog("Task stopped: %s", taskName)
    end)
end

local function stopTask(taskName)
    if security.RunningTasks[taskName] then
        security.RunningTasks[taskName] = false
        debugLog("Stopping task: %s", taskName)
    end
end

-- [ üöú FARMING LOGIC üöú ]
function farmLogic()
    if not farm.EnableFarming then return end
    
    -- Equip rod if needed
    if farm.AutoEquipRod then
        EquipRod()
        safeWait(0.5)
    end
    
    -- Auto cast logic
    if farm.AutoCast then
        local power = farm.LegitCastMode and math.random(70, 100) / 100 or 1
        local castSuccess = CastRod(power)
        
        if castSuccess then
            debugLog("Cast rod with power: %s", power)
            showFeedback(PlayerGui:FindFirstChild("CastButton"), "success")
        end
        
        safeWait(farm.CastDelay)
    end
    
    -- Auto shake logic
    if farm.AutoShake then
        local shakeSuccess = ShakeRod()
        
        if shakeSuccess then
            debugLog("Shook rod")
            showFeedback(PlayerGui:FindFirstChild("ShakeButton"), "success")
        end
        
        safeWait(farm.ShakeDelay)
    end
    
    -- Auto reel logic
    if farm.AutoReel then
        local reelSuccess = ReelFish()
        
        if reelSuccess then
            debugLog("Reeled fish")
            showFeedback(PlayerGui:FindFirstChild("ReelButton"), "success")
            
            -- If we successfully reeled, we might need to sell or appraise
            if farm.AutoSell then
                safeWait(0.5)
                SellFish()
            end
            
            if farm.AutoAppraise then
                -- This would need to be connected to the inventory system
                -- to know which fish to appraise
                -- Placeholder for now
            end
        end
        
        safeWait(farm.ReelDelay)
    end
    
    -- Add a slight delay to prevent excessive server calls
    safeWait(0.1)
end
-- [ ü¶Ä CRAB LOGIC ü¶Ä ]
function crabLogic()
    -- Auto buy crab cages
    if crab.AutoBuyCrabCages then
        local buySuccess = BuyCrabCage()
        
        if buySuccess then
            debugLog("Bought crab cage")
            showFeedback(PlayerGui:FindFirstChild("CrabCageButton"), "success")
        end
    end
    
    -- Auto collect cages logic
    if crab.AutoCollectCages or crab.CollectAllCrabCages then
        local cageIds = findCageIds()
        
        if #cageIds > 0 then
            for _, cageId in ipairs(cageIds) do
                local collectSuccess = CollectCrabCage(cageId)
                if collectSuccess then
                    debugLog("Collected cage: %s", cageId)
                    showFeedback(PlayerGui:FindFirstChild("CollectCageButton"), "success")
                end
                
                if crab.SafeModeCollect then
                    safeWait(getRandomDelay(1, 2)) -- Add delay between collections
                end
            end
        end
    end
    
    -- Add a delay to prevent excessive server calls
    safeWait(0.1)
end

-- [ üîÆ TELEPORT LOGIC üîÆ ]
function teleportLogic()
    if teleports.DiscoverAllPlaces then
        local places = {"Place1", "Place2", "Place3"} -- Replace with actual places in the game
        
        for _, place in ipairs(places) do
            local success = TeleportToPlace(place)
            
            if success then
                debugLog("Teleported to: %s", place)
                showFeedback(PlayerGui:FindFirstChild("TeleportButton"), "success")
                safeWait(3) -- Wait for teleport to complete
            else
                showFeedback(PlayerGui:FindFirstChild("TeleportButton"), "error")
            end
        end
        
        teleports.DiscoverAllPlaces = false -- Turn off after completing
    end
    
        -- Add a delay to prevent excessive server calls
    safeWait(0.1)
end

-- [ üïπ UI NAVIGATION LOGIC üïπ ]
function handleNavigation()
    if not ui.NavigationEnabled then return end
    
    -- Get all UI elements if we don't have them already
    if #ui.Elements == 0 then
        ui.Elements = getAllSelectableElements()
    end
    
    -- Handle focused element highlighting
    if ui.FocusedElement then
        -- Apply visual highlight to focused element
        local originalColor = ui.FocusedElement:GetAttribute("OriginalColor") or ui.Colors.Normal
        if not ui.FocusedElement:GetAttribute("OriginalColor") then
            ui.FocusedElement:SetAttribute("OriginalColor", ui.FocusedElement.BackgroundColor3)
        end
        
        -- Create a pulsing effect on the focused element
        local pulseAmount = (math.sin(tick() * 5) * 0.1) + 0.9
        ui.FocusedElement.BackgroundColor3 = ui.Colors.Focused:Lerp(ui.Colors.Normal, pulseAmount)
        
        -- Reset other elements
        for _, element in ipairs(ui.Elements) do
            if element ~= ui.FocusedElement then
                local origColor = element:GetAttribute("OriginalColor")
                if origColor then
                    element.BackgroundColor3 = origColor
                end
            end
        end
    end
end

-- Function to get all interactive UI elements
function getAllSelectableElements()
    local elements = {}
    
    -- Find all interactive elements in the PlayerGui
    for _, gui in pairs(PlayerGui:GetChildren()) do
        if gui:IsA("ScreenGui") then
            for _, element in pairs(gui:GetDescendants()) do
                if element:IsA("TextButton") or element:IsA("ImageButton") then
                    table.insert(elements, element)
                end
            end
        end
    end
    
    debugLog("Found %d selectable UI elements", #elements)
    return elements
end

-- [ üîÑ TOGGLE FUNCTIONS üîÑ ]
function toggleFeature(featureName)
    local success, errorMsg = pcall(function()
        -- Farm features
        if featureName == "EnableFarming" then
            farm.EnableFarming = not farm.EnableFarming
            if farm.EnableFarming then
                startTask("FarmLogic", farmLogic, 0.1)
            else
                stopTask("FarmLogic")
            end
            debugLog("Farming %s", farm.EnableFarming and "enabled" or "disabled")
            return true
            
        elseif featureName == "AutoCast" then
            farm.AutoCast = not farm.AutoCast
            debugLog("AutoCast %s", farm.AutoCast and "enabled" or "disabled")
            return true
            
        elseif featureName == "AutoShake" then
            farm.AutoShake = not farm.AutoShake
            debugLog("AutoShake %s", farm.AutoShake and "enabled" or "disabled")
            return true
            
        elseif featureName == "AutoReel" then
            farm.AutoReel = not farm.AutoReel
            debugLog("AutoReel %s", farm.AutoReel and "enabled" or "disabled")
            return true
            
        elseif featureName == "AutoSell" then
            farm.AutoSell = not farm.AutoSell
            debugLog("AutoSell %s", farm.AutoSell and "enabled" or "disabled")
            return true
            
        -- Crab features
        elseif featureName == "AutoBuyCrabCages" then
            crab.AutoBuyCrabCages = not crab.AutoBuyCrabCages
            if crab.AutoBuyCrabCages then
                startTask("CrabLogic", crabLogic, 1)
            else
                stopTask("CrabLogic")
            end
            debugLog("AutoBuyCrabCages %s", crab.AutoBuyCrabCages and "enabled" or "disabled")
            return true
            
        elseif featureName == "CollectAllCrabCages" then
            crab.CollectAllCrabCages = not crab.CollectAllCrabCages
            debugLog("CollectAllCrabCages %s", crab.CollectAllCrabCages and "enabled" or "disabled")
            return true
            
        -- UI features
        elseif featureName == "UINavigationToggle" then
            ui.NavigationEnabled = not ui.NavigationEnabled
            if ui.NavigationEnabled then
                ui.Elements = getAllSelectableElements()
                ui.FocusedElement = ui.Elements[1] -- Focus first element
                startTask("UINavigation", handleNavigation, 0.03) -- Smooth updates for UI
                debugLog("UI Navigation Mode: Enabled")
            else
                stopTask("UINavigation")
                -- Reset element highlighting
                if ui.FocusedElement then
                    local origColor = ui.FocusedElement:GetAttribute("OriginalColor")
                    if origColor then
                        ui.FocusedElement.BackgroundColor3 = origColor
                    end
                    ui.FocusedElement = nil
                end
                debugLog("UI Navigation Mode: Disabled")
            end
            return true
            
        -- Settings features
        elseif featureName == "SafeMode" then
            settings.SafeMode = not settings.SafeMode
            debugLog("SafeMode %s", settings.SafeMode and "enabled" or "disabled")
            return true
            
        elseif featureName == "DebugMode" then
            security.DebugMode = not security.DebugMode
            debugLog("DebugMode %s", security.DebugMode and "enabled" or "disabled")
            return true
        end
        
        -- If we get here, the feature wasn't recognized
        debugLog("Unknown feature: %s", featureName)
        return false
    end)
    
    if not success then
        debugLog("Error toggling feature %s: %s", featureName, errorMsg)
        return false
    end
end

-- [ ‚å®Ô∏è INPUT HANDLING ‚å®Ô∏è ]
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if gameProcessedEvent then return end
    
    -- UI toggle
    if input.KeyCode == settings.UIKeybind then
        -- Toggle UI visibility (implementation would depend on your UI setup)
        debugLog("UI toggle hotkey pressed")
    end
    
    -- Navigation toggle
    if input.KeyCode == Enum.KeyCode.Backslash then
        toggleFeature("UINavigationToggle")
    end
    
    -- Navigation controls
    if ui.NavigationEnabled then
        if input.KeyCode == Enum.KeyCode.Up or input.KeyCode == Enum.KeyCode.Down or 
           input.KeyCode == Enum.KeyCode.Left or input.KeyCode == Enum.KeyCode.Right then
            
            local currentIndex = 1
            for i, element in ipairs(ui.Elements) do
                if element == ui.FocusedElement then
                    currentIndex = i
                    break
                end
            end
            
            local newIndex = currentIndex
            if input.KeyCode == Enum.KeyCode.Up then
                newIndex = (currentIndex - 1 <= 0) and #ui.Elements or currentIndex - 1
            elseif input.KeyCode == Enum.KeyCode.Down then
                newIndex = (currentIndex + 1 > #ui.Elements) and 1 or currentIndex + 1
            elseif input.KeyCode == Enum.KeyCode.Left then
                newIndex = (currentIndex - 5 <= 0) and #ui.Elements - (5 - (currentIndex % 5)) or currentIndex - 5
            elseif input.KeyCode == Enum.KeyCode.Right then
                newIndex = (currentIndex + 5 > #ui.Elements) and ((currentIndex + 5) % #ui.Elements) or currentIndex + 5
            end
            
            ui.FocusedElement = ui.Elements[newIndex]
            playSound("Hover")
        elseif input.KeyCode == Enum.KeyCode.Return and ui.FocusedElement then
            -- Simulate click on the focused element
            local clickSuccess, clickError = pcall(function()
                -- Fire mouse click events for the button
                ui.FocusedElement.MouseButton1Click:Fire()
                playSound("Click")
                showFeedback(ui.FocusedElement, "success")
            end)
            
            if not clickSuccess then
                debugLog("Failed to simulate click: %s", clickError)
                playSound("Error")
                showFeedback(ui.FocusedElement, "error")
            end
        end
    end
end)

-- [ üîß INITIALIZATION üîß ]
local function initialize()
    debugLog("Initializing Fisch Script v13.5.8...")
    
    -- Verify critical events exist
    local criticalEvents = {
        "CastRodEvent",
        "ShakeRodEvent",
        "ReelFishEvent",
        "BuyCrabCageEvent",
        "TeleportToPlaceEvent"
    }
    
    local allEventsFound = true
    for _, eventName in ipairs(criticalEvents) do
        if not checkEvent(eventName) then
            allEventsFound = false
            debugLog("Critical event missing: %s", eventName)
        end
    end
    
    if not allEventsFound then
        debugLog("Warning: Some critical events are missing!")
        -- Could show a warning UI here
    end
    
    -- Set random seed based on time for better randomization
    math.randomseed(tick())
    
    -- Create UI feedback sounds
    for name, soundInfo in pairs(ui.Sounds) do
        local sound = Instance.new("Sound")
        sound.SoundId = soundInfo.ID
        sound.Volume = soundInfo.Volume
        sound.Name = "Fisch_" .. name .. "Sound"
        sound.Parent = PlayerGui
    end
    
    -- Load user config if enabled
    if settings.AutoLoadConfig then
        -- Implementation would depend on how you store user configs
        debugLog("Auto-loading user config...")
    end
    
    debugLog("Fisch Script initialized successfully!")
end

-- [ üé¨ SCRIPT EXECUTION üé¨ ]
-- Safe initialization
local success, errorMsg = pcall(initialize)
if not success then
    warn("[Fisch Script] Initialization failed: " .. errorMsg)
end

-- Start the farm logic loop safely
startTask("FarmLogic", function()
    local farmSuccess, farmError = pcall(farmLogic)
    if not farmSuccess then
        debugLog("Error in farm logic: %s", farmError)
    end
end, 0.1)

-- Start the crab logic loop safely
startTask("CrabLogic", function()
    local crabSuccess, crabError = pcall(crabLogic)
    if not crabSuccess then
        debugLog("Error in crab logic: %s", crabError)
    end
end, 1.0)

-- Start the teleport logic loop safely
startTask("TeleportLogic", function()
    local teleportSuccess, teleportError = pcall(teleportLogic)
    if not teleportSuccess then
        debugLog("Error in teleport logic: %s", teleportError)
    end
end, 1.0)

-- Example of enabling features (uncomment to activate by default)
-- toggleFeature("EnableFarming")
-- toggleFeature("AutoCast")
-- toggleFeature("AutoShake")
-- toggleFeature("AutoReel")
-- toggleFeature("SafeMode")

-- Script shutdown handler
game:BindToClose(function()
    debugLog("Shutting down Fisch Script...")
    
    -- Stop all running tasks
    for taskName, _ in pairs(security.RunningTasks) do
        stopTask(taskName)
    end
    
    -- Clean up any created instances
    for _, sound in pairs(PlayerGui:GetChildren()) do
        if sound.Name:match("^Fisch_") then
            sound:Destroy()
        end
    end
    
    debugLog("Fisch Script shutdown complete!")
end)

-- Heartbeat connection for critical real-time features
RunService.Heartbeat:Connect(function()
    -- This should only handle time-sensitive operations
    -- Most logic should be in the task functions with appropriate delays
    
    -- Example: Implement the shake rod middle feature if needed
    if farm.EnableFarming and farm.AutoShake and farm.LockShakeMiddle then
        -- Implementation would depend on how the fishing UI works
    end
end)

-- Show init message
print("üé£ Fisch Script by Omega v13.5.8 loaded! Press " .. settings.UIKeybind.Name .. " to toggle UI")
